scalar Upload

type File {
    filename: String!
    mimetype: String!
    encoding: String!
  }
type Query {
    users: [User!]!
    feed(filter: String, skip: Int, take: Int, orderBy: PostOrderByInput): [Post!]!
    followers: Follow
}

type Mutation{
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    post(userId: ID!,title: String!, description: String!, image_url: String!): Post!
    like(postId: ID!): Like
    view(postId: ID!): View
    singleUpload(file: Upload!): File!
    follow(followerId: ID!): Follow
}

type Follow{
    id: ID
    userId: User
    followerId: User
    # follower: User
}

type Like{
    id: ID!
    postId: Post!
    userId: User!
}

type User{
    id: ID!
    name: String!
    email: String!
    posts: [Post!]!
    views: [View!]!
    followers: [User!]
}

type View{
    id: ID!
    userId: User!
    postId: Post!
} 

type Post {
    id: ID!
    description: String!
    title: String!
    image_url: String!
    userId: User!
    likes: [Like!]!
    views: [View!]!
}

type AuthPayload{
    token: String
    user: User
}

input PostOrderByInput {
  description: Sort
  title: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}